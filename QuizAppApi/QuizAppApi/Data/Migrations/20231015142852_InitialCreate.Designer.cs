// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizAppApi.Data;

#nullable disable

namespace QuizAppApi.Data.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20231015142852_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizAppApi.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.MultipleChoiceOption", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MultipleChoiceQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("Correct")
                        .HasColumnType("bit");

                    b.HasKey("Name", "MultipleChoiceQuestionId");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceOptions");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.SingleChoiceOption", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SingleChoiceQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Name", "SingleChoiceQuestionId");

                    b.HasIndex("SingleChoiceQuestionId");

                    b.ToTable("SingleChoiceOptions");
                });

            modelBuilder.Entity("QuizAppApi.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfSubmitters")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAppApi.Models.Question");

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.OpenTextQuestion", b =>
                {
                    b.HasBaseType("QuizAppApi.Models.Question");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("OpenTextQuestion");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.SingleChoiceQuestion", b =>
                {
                    b.HasBaseType("QuizAppApi.Models.Question");

                    b.Property<string>("CorrectOptionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SingleChoiceQuestion");
                });

            modelBuilder.Entity("QuizAppApi.Models.Question", b =>
                {
                    b.HasOne("QuizAppApi.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.MultipleChoiceOption", b =>
                {
                    b.HasOne("QuizAppApi.Models.Questions.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany("MultipleChoiceOptions")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.SingleChoiceOption", b =>
                {
                    b.HasOne("QuizAppApi.Models.Questions.SingleChoiceQuestion", "SingleChoiceQuestion")
                        .WithMany("SingleChoiceOptions")
                        .HasForeignKey("SingleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SingleChoiceQuestion");
                });

            modelBuilder.Entity("QuizAppApi.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.MultipleChoiceQuestion", b =>
                {
                    b.Navigation("MultipleChoiceOptions");
                });

            modelBuilder.Entity("QuizAppApi.Models.Questions.SingleChoiceQuestion", b =>
                {
                    b.Navigation("SingleChoiceOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
