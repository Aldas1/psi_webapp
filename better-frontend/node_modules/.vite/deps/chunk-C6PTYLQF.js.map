{
  "version": 3,
  "sources": ["../../@chakra-ui/input/src/input-group.tsx", "../../@chakra-ui/input/src/input-addon.tsx", "../../@chakra-ui/input/src/input-element.tsx", "../../@chakra-ui/form-control/src/form-control.tsx", "../../@chakra-ui/form-control/src/form-error.tsx", "../../@chakra-ui/form-control/src/form-label.tsx", "../../@chakra-ui/form-control/src/use-form-control.ts", "../../@chakra-ui/input/src/input.tsx"],
  "sourcesContent": ["import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n", "import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\ntype Placement = \"left\" | \"right\"\n\nconst placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\",\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\",\n  },\n}\n\nconst StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\",\n  },\n})\n\nexport interface InputAddonProps extends HTMLChakraProps<\"div\"> {\n  placement?: Placement\n}\n\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\nexport const InputAddon = forwardRef<InputAddonProps, \"div\">(\n  function InputAddon(props, ref) {\n    const { placement = \"left\", ...rest } = props\n    const placementStyles = placements[placement] ?? {}\n    const styles = useInputGroupStyles()\n\n    return (\n      <StyledAddon\n        ref={ref}\n        {...rest}\n        __css={{\n          ...styles.addon,\n          ...placementStyles,\n        }}\n      />\n    )\n  },\n)\n\nInputAddon.displayName = \"InputAddon\"\n\nexport type InputLeftAddonProps = InputAddonProps\n\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\nexport const InputLeftAddon = forwardRef<InputLeftAddonProps, \"div\">(\n  function InputLeftAddon(props, ref) {\n    return (\n      <InputAddon\n        ref={ref}\n        placement=\"left\"\n        {...props}\n        className={cx(\"chakra-input__left-addon\", props.className)}\n      />\n    )\n  },\n)\n\nInputLeftAddon.displayName = \"InputLeftAddon\"\n\n// This is used in `input-group.tsx`\nInputLeftAddon.id = \"InputLeftAddon\"\n\nexport type InputRightAddonProps = InputAddonProps\n\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\nexport const InputRightAddon = forwardRef<InputRightAddonProps, \"div\">(\n  function InputRightAddon(props, ref) {\n    return (\n      <InputAddon\n        ref={ref}\n        placement=\"right\"\n        {...props}\n        className={cx(\"chakra-input__right-addon\", props.className)}\n      />\n    )\n  },\n)\n\nInputRightAddon.displayName = \"InputRightAddon\"\n\n// This is used in `input-group.tsx`\nInputRightAddon.id = \"InputRightAddon\"\n", "import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n", "import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n", "import { type IconProps, Icon } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nconst [FormErrorStylesProvider, useFormErrorStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormErrorStylesContext`,\n  errorMessage: `useFormErrorStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormError />\" `,\n})\n\nexport { useFormErrorStyles }\nexport interface FormErrorMessageProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormErrorMessage\"> {}\n\n/**\n * Used to provide feedback about an invalid input,\n * and suggest clear instructions on how to fix it.\n */\nexport const FormErrorMessage = forwardRef<FormErrorMessageProps, \"div\">(\n  (props, ref) => {\n    const styles = useMultiStyleConfig(\"FormError\", props)\n    const ownProps = omitThemingProps(props)\n    const field = useFormControlContext()\n\n    if (!field?.isInvalid) return null\n\n    return (\n      <FormErrorStylesProvider value={styles}>\n        <chakra.div\n          {...field?.getErrorMessageProps(ownProps, ref)}\n          className={cx(\"chakra-form__error-message\", props.className)}\n          __css={{\n            display: \"flex\",\n            alignItems: \"center\",\n            ...styles.text,\n          }}\n        />\n      </FormErrorStylesProvider>\n    )\n  },\n)\n\nFormErrorMessage.displayName = \"FormErrorMessage\"\n\n/**\n * Used as the visual indicator that a field is invalid or\n * a field has incorrect values.\n */\nexport const FormErrorIcon = forwardRef<IconProps, \"svg\">((props, ref) => {\n  const styles = useFormErrorStyles()\n  const field = useFormControlContext()\n\n  if (!field?.isInvalid) return null\n\n  const _className = cx(\"chakra-form__error-icon\", props.className)\n\n  return (\n    <Icon\n      ref={ref}\n      aria-hidden\n      {...props}\n      __css={styles.icon}\n      className={_className}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z\"\n      />\n    </Icon>\n  )\n})\n\nFormErrorIcon.displayName = \"FormErrorIcon\"\n", "import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n", "import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n", "import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],
  "mappings": "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",
  "names": ["InputGroup", "import_jsx_runtime", "InputAddon", "InputLeftAddon", "InputRightAddon", "import_jsx_runtime", "InputElement", "InputLeftElement", "InputRightElement", "import_react", "import_jsx_runtime", "props", "FormControl", "FormHelperText", "import_jsx_runtime", "import_jsx_runtime", "FormLabel", "RequiredIndicator", "import_jsx_runtime", "Input"]
}
